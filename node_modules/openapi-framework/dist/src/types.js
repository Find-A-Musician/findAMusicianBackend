"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
exports.__esModule = true;
exports.ConsoleDebugAdapterLogger = void 0;
var ConsoleDebugAdapterLogger = /** @class */ (function () {
    function ConsoleDebugAdapterLogger() {
    }
    /**
     * `console.debug` is just an alias for `.log()`, and we want debug logging to be optional.
     * This class delegates to `console` and overrides `.debug()` to be a no-op.
     */
    ConsoleDebugAdapterLogger.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        // no-op
    };
    ConsoleDebugAdapterLogger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.error.apply(console, __spreadArray([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.info.apply(console, __spreadArray([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.trace = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.trace.apply(console, __spreadArray([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.warn.apply(console, __spreadArray([message], optionalParams));
    };
    return ConsoleDebugAdapterLogger;
}());
exports.ConsoleDebugAdapterLogger = ConsoleDebugAdapterLogger;
//# sourceMappingURL=types.js.map